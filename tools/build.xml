<project name="RobotLegs-Generator-1.0" default="main" >

	<!-- 
	User specific the global configuration properties.
	-->
	<property file="project.properties" />
	<property file="config/robotlegs-generator.properties" />
	<property file="config/log.properties" />	
	
	<target name="main" depends="create-RobotLegs-directories" />	
	
	<!-- create default RobotLegs directories -->
	<target name="create-RobotLegs-directories" >
		<echo>${log.create.RobotLegs.directories.message}</echo>
        <mkdir dir="${project.url}/${control.dir}" />
		<mkdir dir="${project.url}/${services.dir}" />
		<mkdir dir="${project.url}/${events.dir}" />
		<mkdir dir="${project.url}/utils" />
		<mkdir dir="${project.url}/helpers" />
		<mkdir dir="${project.url}/${view.dir}" />
		<mkdir dir="${project.url}/${view.dir}/events" />
		<mkdir dir="${project.url}/${view.dir}/components" />
		<mkdir dir="${project.url}/${view.dir}/mediators" />
		<mkdir dir="${project.url}/${view.dir}/helpers" />
        <mkdir dir="${project.url}/${model.dir}/${vo.dir}" />		
	</target>
    
	<!-- move libraries and source code -->
	<target name="move-libraries-and-source-code" >
		<echo>${log.create.RobotLegs.libraries.message}</echo>
        <echo>Copy libs folder</echo>
		<copy todir="${project.root.url}/libs">
			<fileset dir="${templates.dir}/libs"/>
  		</copy>	
	</target>
	
	<!-- Generate Main class & context -->
	<target name="create-main-class-and-context" >
		<echo>${log.create.main.class.and.context}</echo>	
		<copy file="${robotlegs.templates.dir}/ProjectContext.as" 
			  tofile="${project.url}/${project.name}Context.as"  
			  overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
	           		<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
	           		<token key="robotlegs.dir" value="${robotlegs.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		<echo>Copy ${robotlegs.templates.dir}/Main.mxml</echo>
		<copy file="${robotlegs.templates.dir}/Main.mxml" 
			  tofile="${project.main.url}/Main.mxml"  
			  overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
	           		<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
	            </replacetokens>
	        </filterchain>
	    </copy>	
	</target>
	
	<!-- add-startup-command -->
	<target name="add-startup-command">
		
		<echo>${log.add.startup.commmand.message}</echo>
		
	    <copy file="${robotlegs.templates.dir}/StartupCommand.as" 
	    	  tofile="${project.url}/${control.dir}/StartupCommand.as" 
	    	  overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="Startup" />
	            </replacetokens>
	        </filterchain>
	    </copy>
	      
	    <convertToUpperCase property="upperCaseGesture" value="${gesture}" />
	    <convertToLowerCase property="lowerCaseGesture" value="${gesture}" />
		
		<replace file="${project.url}/${project.name}Context.as" 
			     token="//todo: add commands" 
			     value="//todo: add commands${line.separator}
						     commandMap.mapEvent(ContextEvent.STARTUP, StartupCommand, ContextEvent, true);"
			     />
		
		<replace file="${project.url}/${project.name}Context.as" 
			     token="super.startup();" 
			     value="dispatchEvent( new ContextEvent( ContextEvent.STARTUP ) );"
			     />
	</target>

	<target name="add-event-command-user-gesture">
		
		<echo>${log.add.event.commmand.message}</echo>
		
	    <convertToUpperCase property="upperCaseGesture" value="${gesture}" />
	    <convertToLowerCase property="lowerCaseGesture" value="${gesture}" />		
		
	    <copy file="${robotlegs.templates.dir}/Command.as" 
	    	  tofile="${project.url}/${control.dir}/${gesture}Command.as" 
	    	  overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
		           	<token key="upperCaseGesture"  value="${upperCaseGesture}" />
	           		<token key="lowerCaseGesture"  value="${lowerCaseGesture}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		
	    <copy file="${robotlegs.templates.dir}/Event.as" 
	    	  tofile="${project.url}/${events.dir}/${gesture}Event.as" 
	    	  overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gesture}" />
		           	<token key="upperCaseGesture"  value="${upperCaseGesture}" />
	           		<token key="lowerCaseGesture"  value="${lowerCaseGesture}" />
	            </replacetokens>
	        </filterchain>
	    </copy>		
		
		<echo>Register command with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" 
			     token="//todo: add commands" 
			     value="//todo: add commands${line.separator}
			        commandMap.mapEvent(${gesture}Event.${upperCaseGesture}_EVENT, ${gesture}Command, ${gesture}Event);"
			     />
	</target>
	
	<!-- create ValueObject class -->
	<target name="create-value-object" >
		<echo>${log.value.object.message}</echo>
		
	    <copy file="${robotlegs.templates.dir}/ValueObject.as" 
	    	tofile="${project.url}/${vo.dir}/${gesture}VO.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}" />
                    	<token key="vo.dir" value="${vo.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
	</target>
	
	<!-- create view-mediator class -->
	<target name="create-view-mediator" >
		<echo>${log.view.mediator.message}</echo>
		
	    <convertToUpperCase property="upperCaseGesture" value="${gesture}" />
	    <convertToLowerCase property="lowerCaseGesture" value="${gesture}" />		
		
	    <copy file="${robotlegs.templates.dir}/Mediator.as" 
	    	tofile="${project.url}/${view.dir}/mediators/${gesture}Mediator.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}" />
                    	<token key="view.dir" value="${view.dir}" />
        		        <token key="upperCaseGesture" value="${upperCaseGesture}" />
        	           	<token key="lowerCaseGesture" value="${lowerCaseGesture}" />	           	
	            </replacetokens>
	        </filterchain>
	    </copy>
		
	    <copy file="${robotlegs.templates.dir}/View.mxml" 
	    	tofile="${project.url}/${view.dir}/${gesture}View.mxml" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}" />
                    	<token key="view.dir" value="${view.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		
		<echo>Register mediator with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" 
			     token="// TODO: Add View" 
			     value="// TODO: Add View${line.separator}
					      mediatorMap.mapView(${gesture}View, ${gesture}Mediator);"
			     />
		
	</target>
	
	<!-- create model class -->
	<target name="create-model-class" >
		<echo>${log.create.model.class.message}</echo>
		
	    <copy file="${robotlegs.templates.dir}/Model.as" 
	    	tofile="${project.url}/${model.dir}/${gesture}Model.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}" />
                    	<token key="model.dir" value="${model.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		
		<echo>Register model with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" 
			     token="// TODO: Add Model" 
			     value="// TODO: Add Model${line.separator}
			        injector.mapSingleton( ${gesture}Model );"
			     />
		
	</target>
	
	<!-- create service class -->
	<target name="create-service-class" >
		<echo>${log.create.service.message}</echo>
		
	    <copy file="${robotlegs.templates.dir}/Service.as" 
	    	tofile="${project.url}/${services.dir}/${gesture}Service.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gesture}" />
                    	<token key="services.dir " value="${services.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		
		<echo>Register service with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" 
			     token="// TODO: Add Services" 
			     value="// TODO: Add Services${line.separator}
			        injector.mapSingletonOf( ${gesture}Service, ${gesture}Service );"
			     />
		
	</target>	
		
    <!-- private -->
	<scriptdef name="convertToUpperCase" language="javascript" >
		<attribute name="property" />
		<attribute name="value"    />
		project.setNewProperty( attributes.get("property"), attributes.get("value").toUpperCase() );
	</scriptdef>
	
	<scriptdef name="convertToLowerCase" language="javascript" >
		<attribute name="property" />
		<attribute name="value"    />
		project.setNewProperty( attributes.get("property"), attributes.get("value").toLowerCase() );
	</scriptdef>			      
    
</project>    